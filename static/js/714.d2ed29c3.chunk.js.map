{"version":3,"file":"static/js/714.d2ed29c3.chunk.js","mappings":"2KAYA,IAAMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACb,OAArBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,oBClEjE,MAzBA,WACE,MCJK,WACL,MAA2BC,EAAAA,SAAe,MAA1C,eAAOC,EAAP,KAAeC,EAAf,KA0BA,OAbAF,EAAAA,WAAgB,WACd,IAAMG,EAAQ,SAACC,GACbA,EAAEC,iBACFH,EAASE,IAKX,OAFA5B,OAAO8B,iBAAiB,sBAAuBH,GAExC,WACL3B,OAAO+B,oBAAoB,sBAAuBJ,MAEnD,IAEI,CAACF,EAxBgB,WACtB,OAAIA,EACKA,EAAOA,SAETO,QAAQC,OACb,IAAIC,MACF,uEDL4BC,GAAlC,eAAOV,EAAP,KAAeW,EAAf,KACA,EAAqCZ,EAAAA,UAAe,GAApD,eAAkBa,GAAlB,WAUA,OANAb,EAAAA,WAAgB,WACVC,GACFY,GAAgB,KAEjB,CAACZ,KAGF,iBAAKa,UAAU,MAAf,sBAGE,iCACE,mBAAQC,QAbD,kBAAMF,GAAgB,IAa7B,oBACA,mBAAQE,QAASH,EAAjB,uCDDD,SAAkB9B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiC,IAAIC,YAAwBzC,OAAOC,SAASyC,MACpDC,SAAW3C,OAAOC,SAAS0C,OAIvC,OAGF3C,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMoC,YAAN,sBAEP3C,IAgEV,SAAiCO,EAAOC,GAEtCsC,MAAMvC,EAAO,CACXwC,QAAS,CAAE,iBAAkB,YAE5BnC,MAAK,SAACoC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C3C,UAAUC,cAAcmB,MAAMjB,MAAK,SAACC,GAClCA,EAAawC,aAAazC,MAAK,WAC7BV,OAAOC,SAASmD,eAKpBhD,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAkC,CAAwBhD,EAAOC,GAI/BC,UAAUC,cAAcmB,MAAMjB,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OCnB/BE,I","sources":["serviceWorkerRegistration.js","Page2.js","useAddToHomescreenPrompt.js"],"sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { useAddToHomescreenPrompt } from \"./useAddToHomescreenPrompt\";\nimport * as serviceWorker from \"./serviceWorkerRegistration\";\nimport \"./App.css\";\n\nfunction Page() {\n  const [prompt, promptToInstall] = useAddToHomescreenPrompt();\n  const [isVisible, setVisibleState] = React.useState(false);\n\n  const hide = () => setVisibleState(false);\n\n  React.useEffect(() => {\n    if (prompt) {\n      setVisibleState(true);\n    }\n  }, [prompt]);\n\n  return (\n    <div className=\"App\">\n      page two\n      {/* {isVisible && ( */}\n      <>\n        <button onClick={hide}>Close</button>\n        <button onClick={promptToInstall}>Add to homescreen</button>\n      </>\n      {/* )} */}\n    </div>\n  );\n}\n\nexport default Page;\nserviceWorker.register();\n","import * as React from \"react\";\n\nexport function useAddToHomescreenPrompt() {\n  const [prompt, setState] = React.useState(null);\n\n  const promptToInstall = () => {\n    if (prompt) {\n      return prompt.prompt();\n    }\n    return Promise.reject(\n      new Error(\n        'Tried installing before browser sent \"beforeinstallprompt\" event'\n      )\n    );\n  };\n\n  React.useEffect(() => {\n    const ready = (e) => {\n      e.preventDefault();\n      setState(e);\n    };\n\n    window.addEventListener(\"beforeinstallprompt\", ready);\n\n    return () => {\n      window.removeEventListener(\"beforeinstallprompt\", ready);\n    };\n  }, []);\n\n  return [prompt, promptToInstall];\n}\n"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","React","prompt","setState","ready","e","preventDefault","addEventListener","removeEventListener","Promise","reject","Error","useAddToHomescreenPrompt","promptToInstall","setVisibleState","className","onClick","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"sourceRoot":""}